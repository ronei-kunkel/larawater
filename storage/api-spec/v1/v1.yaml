openapi: 3.0.3

info:
  title: Larawater
  description: |-
    Simple api to manage users and how times the user drink wather
  # termsOfService: 
  contact:
    email: ronei.kunkel@gmail.com
  # license:
  #   name: 
  #   url: 
  version: beta

externalDocs:
  description: Larawater Repository
  url: https://github.com/ronei-kunkel/larawater

servers:
  - url: http://localhost/larawater/api/v1
  - url: http://143.244.177.128/larawater/api/v1

tags:
  - name: Auth
    description: Actions envolving authentication
  - name: User
    description: Actions envolving user

paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Authenticate the user
      description: Authenticate the user to give Authorization to make protected actions
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthData'
        required: true
      responses:
        '200':
          description: JWT to make protected actions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Client Side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Error on both or one user credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    post:
      tags:
        - User
      summary: Register new user
      description: Register new user in system
      operationId: UserRegister
      requestBody:
        description: Register new user in system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterData'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Client side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Client side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/drink:
    post:
      tags:
        - User
      summary: Increase the user drink counter
      description: Increase the drink counter of authenticated user
      operationId: UserDrink
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrinkData'
      responses:
        '200':
          description: Drink counter increased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDrink'
        '400':
          description: Client side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

components:
  schemas:
    RegisterData:
      type: object
      properties:
        name:
          type: string
          example: Lorem Ipsum
        email:
          type: string
          example: mail@xpto.com
        password:
          type: string
          example: $7r0ngP4ssw0rd

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Descriptive error message

    AuthData:
      type: object
      properties:
        email:
          type: string
          example: mail@xpto.com
        password:
          type: string
          example: $7r0ngP4ssw0rd

    Token:
      type: object
      properties:
        token:
          type: string
          example: Bearer xxx.xxx.xxx
          
    DrinkData:
      type: object
      properties:
        quantity:
          type: integer
          example: 1
    
    UserDrink:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: mail@xpto.com
            drink_counter:
              type: integer
              example: 1

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT